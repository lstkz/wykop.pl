scalar Void

type Query {
  me: User!
  ping: Float!
  allTodos: [Todo!]!
}

type Mutation {
  login(usernameOrEmail: String!, password: String!): AuthResult
  register(values: RegisterInput!): AuthResult
  addTodo(name: String!): Todo
  removeTodo(id: String!): Void
  createAppLink(values: AppLinkInput): String!
}

type AppLink {
  id: ID!
  author: User!
  title: String!
  description: String!
  url: String!
  totalVotes: Float!
}

type Subscription {
  todoCreated: Todo!
  todoRemoved: Todo!
}

type AuthResult {
  token: String!
  user: User!
}

type User {
  id: String!
  username: String!
}

type Todo {
  id: ID!
  userId: ID!
  name: String!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
}

input AppLinkInput {
  title: String!
  description: String!
  url: String!
  tags: [String!]!
}
